/*
 * SPDX-FileCopyrightText: 2024 Espressif Systems (Shanghai) CO LTD
 *
 * SPDX-License-Identifier: Unlicense OR CC0-1.0
 */
#ifndef COMMON_H
#define COMMON_H

/* Includes */
/* STD APIs */
#include <assert.h>
#include <stdbool.h>
#include <stdio.h>
#include <string.h>

/* ESP APIs */
#include "esp_log.h"
#include "nvs_flash.h"
#include "sdkconfig.h"

/* FreeRTOS APIs */
#include <freertos/FreeRTOS.h>
#include <freertos/task.h>

/* NimBLE stack APIs */
#include "host/ble_hs.h"
#include "host/ble_uuid.h"
#include "host/util/util.h"
#include "nimble/ble.h"
#include "nimble/nimble_port.h"
#include "nimble/nimble_port_freertos.h"

/* Global vars*/
static uint8_t own_addr_type;

/* Defines */
#define DEVICE_NAME "CoopDevice"
#define SIG_SIZE 256
#define HASH_SIZE 32                  // Firmware hash size in bytes
#define CUSTOM_DESCRIPTOR_UUID 0x2901 // UUID for User Description Descriptor

// Corrected UUIDs (Little Endian Format)
static const ble_uuid128_t SERVICE_UUID = {
    .u = {.type = BLE_UUID_TYPE_128},
    .value = {0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0xab, 0xef, 0xcd, 0xab, 0x00, 0x00, 0x18, 0x0a}};

static const ble_uuid128_t READ_DEVICE_TYPE_UUID = {
    .u = {.type = BLE_UUID_TYPE_128},
    .value = {0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0xab, 0xef, 0xcd, 0xab, 0x00, 0x00, 0x01, 0x26}};

static const ble_uuid128_t READ_HASH_UUID = {
    .u = {.type = BLE_UUID_TYPE_128},
    .value = {0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0xab, 0xef, 0xcd, 0xab, 0x00, 0x00, 0x01, 0x27}};

static const ble_uuid128_t READ_SIGNATURE_UUID = {
    .u = {.type = BLE_UUID_TYPE_128},
    .value = {0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0xab, 0xef, 0xcd, 0xab, 0x00, 0x00, 0x01, 0x28}};

static const ble_uuid128_t WRITE_ACK_UUID = {
    .u = {.type = BLE_UUID_TYPE_128},
    .value = {0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0xab, 0xef, 0xcd, 0xab, 0x00, 0x00, 0x01, 0x29}};

static const ble_uuid128_t READ_DEVICE_ID_UUID = {
    .u = {.type = BLE_UUID_TYPE_128},
    .value = {0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0xab, 0xef, 0xcd, 0xab, 0x00, 0x00, 0x01, 0x2a}};

static const ble_uuid128_t WRITE_WIFI_CONFIG_UUID = {
    .u = {.type = BLE_UUID_TYPE_128},
    .value = {0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0xab, 0xef, 0xcd, 0xab, 0x00, 0x00, 0x01, 0x2b}};

static const ble_uuid128_t READ_WIFI_SSID_LIST_UUID = {
    .u = {.type = BLE_UUID_TYPE_128},
    .value = {0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0xab, 0xef, 0xcd, 0xab, 0x00, 0x00, 0x01, 0x2c}};

static const ble_uuid128_t WRITE_OTA_CERTIFICATE_UUID = {
    .u = {.type = BLE_UUID_TYPE_128},
    .value = {0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0xab, 0xef, 0xcd, 0xab, 0x00, 0x00, 0x01, 0x2d}};

static const ble_uuid128_t WRITE_MQTT_URL_UUID = {
    .u = {.type = BLE_UUID_TYPE_128},
    .value = {0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0xab, 0xef, 0xcd, 0xab, 0x00, 0x00, 0x01, 0x2e}};

static const ble_uuid128_t READ_DEVICE_MQTT_STATUS_UUID = {
    .u = {.type = BLE_UUID_TYPE_128},
    .value = {0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0xab, 0xef, 0xcd, 0xab, 0x00, 0x00, 0x01, 0x2f}};

static const ble_uuid128_t WRITE_IOT_DEVICE_NAME_UUID = {
    .u = {.type = BLE_UUID_TYPE_128},
    .value = {0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0xab, 0xef, 0xcd, 0xab, 0x00, 0x00, 0x01, 0x30}};

#endif // COMMON_H
